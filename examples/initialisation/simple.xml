<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="1">

<css lib="datatables searchpanes select scroller"/>

<js lib="jquery datatables searchpanes select scroller">
<![CDATA[

$('#example').DataTable({
	layout: {
		top1: 'searchPanes'
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

var table = new DataTable("#example", {
  layout: {
    top: {
      searchPanes: {
        columns: [3]
      }
    }
  },
  scrollY: 300,
  scroller: true,
  serverSide: true,
  ajax: function (data, callback, settings) {
    var out = [];

    for (var i = data.start, ien = data.start + data.length; i < ien; i++) {
      out.push([i + "-1", i + "-2", i + "-3", i + "-4", i + "-5", i + "-6"]);
    }

    setTimeout(function () {
      callback({
        draw: data.draw,
        data: out,
        recordsTotal: 5000000,
        recordsFiltered: 5000000
      });
    }, 150);
  },
  columnDefs: [
    {
      searchPanes: {
        options: [
          {
            label: "Option 1",
            value: function (rowData, rowIdx) {
              return true;
            }
          },
          {
            label: "Option 2",
            value: function (rowData, rowIdx) {
              return true;
            }
          }
        ],
        combiner: "and"
      },
      targets: [3]
    }
  ]
});


]]>
</js-vanilla>

<title lib="SearchPanes">Basic Initialisation</title>

<info><![CDATA[

This is the `-feature searchPanes` extension for DataTables. It allows results to be filtered based on the values of columns.

The SearchPanes control can be inserted into the document using the `-init layout` option, which allows its position around the table to be defined. In this case it is placed in the `top1` row, which is above the default controls DataTables provides.

See other examples for more details and configuration options.

]]></info>

</dt-example>
