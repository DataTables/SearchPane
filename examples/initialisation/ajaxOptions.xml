<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="12">

<css lib="datatables searchpanes select"/>

<js lib="jquery datatables searchpanes select">
<![CDATA[

$(document).ready( function() {
  var table = $('#example').DataTable({
    ajax: '../resources/options.json',
    dom: 'Plfrtip',
    columns: [
        { data: "users.first_name" },
        { data: "users.last_name" },
        { data: "users.phone" },
        { data: "sites.name" }
    ],
    searchPanes: {
          "viewTotal": true
    },
    columnDefs: [{
        searchPanes: {
            show: true
        },
        targets: [0, 1, 2, 3]
    }]
  });
} );


]]>
</js>

<title lib="searchPanes">Ajax Loaded SearchPanes Options</title>

<info><![CDATA[

This is the `-init searchPanes`extension for DataTables. This example shows how SearchPanes can be populated via ajax, while using client-side processing. The SearchPanes options must be defined in the ajax json data for this to happen, otherwise SearchPanes will just extract the data from the table as usual. The structure of the JSON required is documented [here](https://datatables.net/extensions/searchpanes/serverside#Implementation-details) under the "Returned Data" heading.

It is worth noting that due to the requirements for users to provide accurate data for the SearchPanes options, neither `-init searchPanes.cascadePanes` or `-init searchPanes.viewTotal` are supported using this setup. While it is still possible to enable these options, it is not advised and may lead to unexpected behaviour.

]]></info>

<custom-table>
<table id="example" class="display nowrap" width="100%">
        <thead>
          <tr>
            <th>First name</th>
            <th>Last name</th>
            <th>Phone</th>
            <th>Site</th>
          </tr>
        </thead>
      </table>
</custom-table>
</dt-example>
