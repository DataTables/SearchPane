<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="2">

<css lib="datatables searchpanes select"/>

<js lib="jquery datatables searchpanes select">
<![CDATA[

$('#example').DataTable({
	layout: {
		top1: {
			searchPanes: {
				panes: [
					{
						header: 'Custom',
						options: [
							{
								label: 'Accountants from Tokyo',
								value: function (rowData, rowIdx) {
									return (
										rowData[1] === 'Accountant' &&
										rowData[2] === 'Tokyo'
									);
								},
								className: 'tokyo'
							}
						],
						dtOpts: {
							searching: false,
							order: [[1, 'desc']]
						}
					}
				]
			}
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	layout: {
		top1: {
			searchPanes: {
				panes: [
					{
						header: 'Custom',
						options: [
							{
								label: 'Accountants from Tokyo',
								value: function (rowData, rowIdx) {
									return (
										rowData[1] === 'Accountant' &&
										rowData[2] === 'Tokyo'
									);
								},
								className: 'tokyo'
							}
						],
						dtOpts: {
							searching: false,
							order: [[1, 'desc']]
						}
					}
				]
			}
		}
	}
});

]]>
</js-vanilla>

<title lib="SearchPanes">Custom Filtering Pane</title>

<info><![CDATA[

This example of SearchPanes demonstrates the functionality to add custom panes. Panes are populated with custom options which can search the table across multiple columns.

Technically this is also possible to do with a custom function in any of the automatically occurring Panes. This just seems a bit neater.

The `-feature searchPanes.panes` config option holds an object for each custom Pane.

]]></info>

</dt-example>
