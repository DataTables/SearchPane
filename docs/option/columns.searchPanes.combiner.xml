<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchPanes">
	<name>columns.searchPanes.combiner</name>
	<summary>Set the type of logic to be implemented on the pane</summary>
	<since>SearchPanes 1.0.0</since>

	<type type="string">
		<description>
            By setting the `-init columns.searchPanes.combiner` option to `and` when searching, the pane will apply AND logic rather than the default OR Logic.
        </description>
	</type>

	<default value="or">
        The default value for the `-init columns.searchPanes.combiner` parameter is `or`, meaning that as standard the pane will search using OR logic.
    </default>
	<description>
		<![CDATA[
        As standard, SearchPanes will use OR logic when multiple selections have been made. However at times it may be desirable to implement AND logic instead, for example to eliminate rows from the dataset. 

        Note: When using `-init columns.searchPanes.combiner` along with `-init searchPanes.cascadePanes` you must make sure that your data is appropriate for the selection that you make. `-init searchPanes.cascadePanes` was developed with the default `or` logic in mind, using `and` logic will work in the majority of cases, but may yield some unexpected results when deselecting in a _very_ small amount of cases.
        ]]>
	</description>

	<example title="Set the Combiner Option to and Logic"><![CDATA[

$(document).ready(function() {
    $('#example').DataTable( {
        dom: 'Pfrtip',
        columnDefs:[
            {
                searchPanes: {
                    combiner: 'and',
                },
                targets: [4]
            }
        ]
    });
});

]]></example>

<example title="Using the combiner option to eliminate rows"><![CDATA[

$(document).ready(function() {
    var dt = $('#example').DataTable( {
        dom: 'Pfrtip',
        columnDefs:[ 
            {
                searchPanes: {
                    options:[
                        {
                            label: 'Not Edinburgh',
                            value: function(rowData, rowIdx){
                                return rowData[3] !== 'Edinburgh';
                            }
                        },
                        {
                            label: 'Not London',
                            value: function(rowData, rowIdx){
                                return rowData[3] !== 'London';
                            }
                        }
                    ],
                    combiner: 'and'
                },
                targets: [3]
            }
        ],
        select: {
			style:    'os',
			selector: 'td:first-child'
		},
		order: [[ 1, 'asc' ]]
    });
});

]]></example>

</dt-option>
