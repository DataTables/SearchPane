<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchPanes">
	<name>searchPanes.panes.options.value</name>
	<summary>Define the value for an option of a custom pane</summary>
	<since>SearchPanes 1.0.0</since>

	<type type="string">
		<description>
            If `-init searchPanes.panes.options.value` is a string then it will be used to decide whether to include rows in the results by directly comparing against the data in the table.
        </description>
	</type>

    <type type="function">
		<description>
            If `-init searchPanes.panes.options.value` is a function then this function will be used to decide whether a row is to be included or not. It returns a boolean value indicating this. The context of the function is the parent table. The data for the row is also provided so that the function is able to make an informed decision.
        </description>
        <parameter name="rowData" type="array">The data for the row that is being compared.</parameter>
        <parameter name="rowIdx" type="number">The index of where the row that is being compared lies in the DataTable.</parameter>
        <returns type="boolean">Boolean indicating whether the row should be included in the results or not.</returns>
	</type>

	<default value="Undefined">
        The default value of `-init searchPanes.panes.options.value` is undefined as custom panes must be externally defined.
    </default>
	<description>
		<![CDATA[
As standard, the value of the `value` is undefined.

`-init searchPanes.panes.options.value` can be either a string or a function. If it is a string then a straight `===` comparison will be performed between it and the data in the table. It is worth noting that this cannot be the case for completely custom panes with no column attached to them as SearchPanes does not know what to compare it to. In this case SearchPanes must use a function.

Setting `-init searchPanes.panes.options.value` to be a function allows searchPanes to use that function to search for results from the DataTable. The data from the row and the row index are passed into this function. The context is the parent DataTable. The internals of the function are down to the behaviour that you wish to create. Returning `true` from the function will include that row in the results, conversely `false` will exclude the row.

Having the `value` property as a function means that comparisons can be made at a variety of different levels of complexity, all completely open to the developers needs.

The example below shows a very simple function which compares data from multiple columns.
		]]>
	</description>

	<example title="Define custom pane options"><![CDATA[

$(document).ready(function() {
    $('#example').DataTable( {
        searchPanes: {
            panes: [
                {
                    options: [
                        {
                            label:'Accountants in Tokyo',
                            value: function(rowData, rowIdx){
                                return rowData[2] === 'Accountant' && rowData[3] === 'Tokyo';
                            }
                        }
                    ]
                }
            ]
        },
        dom: 'Pfrtip'
    });
});

]]></example>

<related type="option">columns.searchPanes.options.value</related>
<related type="option">searchPanes.panes.options.label</related>
<related type="option">columns.searchPanes.options.label</related>

</dt-option>
